function codepageGenerator(colors, retina) {
    "use strict";
    var BASE64_CHARS, currentBytes, currentFont, currentFontSmall, bigFontBuffer, smallFontBuffer, upperBlockBuffer, lowerBlockBuffer, fullBlockBuffer, NULL, DATA_LINK_ESCAPE, DEVICE_CONTROL_1, CANCEL, END_OF_MEDIUM, SUBSTITUTE, ESCAPE, RECORD_SEPERATOR, UNIT_SEPERATOR, SPACE, EXCLAMATION_MARK, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, SOLIDUS, LESS_THAN_SIGN, GREATER_THAN_SIGN, LEFT_SQUARE_BRACKET, REVERSE_SOLIDUS, RIGHT_SQUARE_BRACKET, LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET, C_CEDILLA, REVERSED_NOT_SIGN, NOT_SIGN, INVERTED_EXCLAMATION_MARK, LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK, RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK, LIGHT_SHADE, MEDIUM_SHADE, DARK_SHADE, BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT, BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE, BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE, BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE, BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE, BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT, BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT, BOX_DRAWINGS_DOUBLE_UP_AND_LEFT, BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE, BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE, BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT, BOX_DRAWINGS_LIGHT_UP_AND_RIGHT, BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL, BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL, BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT, BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE, BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE, BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT, BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT, BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL, BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL, BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT, BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE, BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE, BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE, BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE, BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE, BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE, BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE, BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE, BOX_DRAWINGS_LIGHT_UP_AND_LEFT, BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT, FULL_BLOCK, LOWER_HALF_BLOCK, LEFT_HALF_BLOCK, RIGHT_HALF_BLOCK, UPPER_HALF_BLOCK, GREATER_THAN_OR_EQUAL_TO, LESS_THAN_OR_EQUAL_TO, BULLET_OPERATOR, MIDDLE_DOT, MIDDLE_BLOCK, NO_BREAK_SPACE;

    NULL = 0;
    DATA_LINK_ESCAPE = 16;
    DEVICE_CONTROL_1 = 17;
    CANCEL = 24;
    END_OF_MEDIUM = 25;
    SUBSTITUTE = 26;
    ESCAPE = 27;
    RECORD_SEPERATOR = 30;
    UNIT_SEPERATOR = 31;
    SPACE = 32;
    EXCLAMATION_MARK = 33;
    LEFT_PARENTHESIS = 40;
    RIGHT_PARENTHESIS = 41;
    SOLIDUS = 47;
    LESS_THAN_SIGN = 60;
    GREATER_THAN_SIGN = 62;
    LEFT_SQUARE_BRACKET = 91;
    REVERSE_SOLIDUS = 92;
    RIGHT_SQUARE_BRACKET = 93;
    LEFT_CURLY_BRACKET = 123;
    RIGHT_CURLY_BRACKET = 125;
    C_CEDILLA = 128;
    REVERSED_NOT_SIGN = 169;
    NOT_SIGN = 170;
    INVERTED_EXCLAMATION_MARK = 173;
    LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK = 174;
    RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK = 175;
    LIGHT_SHADE = 176;
    MEDIUM_SHADE = 177;
    DARK_SHADE = 178;
    BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT = 180;
    BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE = 181;
    BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE = 182;
    BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE = 183;
    BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE = 184;
    BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT = 185;
    BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT = 187;
    BOX_DRAWINGS_DOUBLE_UP_AND_LEFT = 188;
    BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE = 189;
    BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE = 190;
    BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT = 191;
    BOX_DRAWINGS_LIGHT_UP_AND_RIGHT = 192;
    BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL = 193;
    BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL = 194;
    BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT = 195;
    BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE = 198;
    BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE = 199;
    BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT = 200;
    BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT = 201;
    BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL = 202;
    BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL = 203;
    BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT = 204;
    BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE = 207;
    BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE = 208;
    BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE = 209;
    BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE = 210;
    BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE = 211;
    BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE = 212;
    BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE = 213;
    BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE = 214;
    BOX_DRAWINGS_LIGHT_UP_AND_LEFT = 217;
    BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT = 218;
    FULL_BLOCK = 219;
    LOWER_HALF_BLOCK = 220;
    LEFT_HALF_BLOCK = 221;
    RIGHT_HALF_BLOCK = 222;
    UPPER_HALF_BLOCK = 223;
    GREATER_THAN_OR_EQUAL_TO = 242;
    LESS_THAN_OR_EQUAL_TO = 243;
    BULLET_OPERATOR = 249;
    MIDDLE_DOT = 250;
    MIDDLE_BLOCK = 254;
    NO_BREAK_SPACE = 255;

    BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    bigFontBuffer = [];
    smallFontBuffer = [];
    upperBlockBuffer = [];
    lowerBlockBuffer = [];
    fullBlockBuffer = [];

    function bytesToBits(width, height, bytes) {
        var bits, i, j, k;
        bits = new Uint8Array(width * height * 256);
        for (i = 0, k = 0; i < width * height * 256 / 8; i += 1) {
            for (j = 7; j >= 0; j -= 1, k += 1) {
                bits[k] = (bytes[i] >> j) & 1;
            }
        }
        return {
            "bits": bits,
            "width": width,
            "height": height
        };
    }

    function base64ToBits(width, height, base64) {
        var i, j, bytes16, bytes8;
        bytes16 = new Uint32Array(1);
        bytes8 = new Uint8Array(base64.length / 4 * 3);
        for (i = j = 0; i < base64.length; bytes16[0] = 0, i += 4, j += 3) {
            bytes16[0] += (BASE64_CHARS.indexOf(base64.charAt(i)) & 63) << 18;
            bytes16[0] += (BASE64_CHARS.indexOf(base64.charAt(i + 1)) & 63) << 12;
            bytes16[0] += (BASE64_CHARS.indexOf(base64.charAt(i + 2)) & 63) << 6;
            bytes16[0] += BASE64_CHARS.indexOf(base64.charAt(i + 3)) & 63;
            bytes8[j] = (bytes16[0] >> 16) & 255;
            bytes8[j + 1] = (bytes16[0] >> 8) & 255;
            bytes8[j + 2] = bytes16[0] & 255;
        }
        currentBytes = bytes8.subarray(0, height * 256);
        return bytesToBits(width, height, bytes8);
    }

    currentFontSmall = base64ToBits(4, 8, "AAAAAACQD2Bvb/CfCu5EAATu5AAE6k4ABO5OAAAGYAD/+Z//AGmWAP+Waf8CSqQABKpEAAdESAAHVVoABEpEAAjOyAACbmIABOTkAAqqCgAHpiIwaGlhYAAA7gAE5OTgBOREQATkREAALyAAAE9AAAAI8AAAb2AAAE7gAADuQAAAAAAABEQEAAqgAAAE5OQARoQsQACSSQAE5JpQBIAAAAJERCAEIiJACk5KAABOQAAAAASAAA4AAAAABAAAJEgABKqkAAxETgAMJI4ADCQsAAiORAAOhCwABIykAA4kRAAEpKQABqYiAABAQAAAQEgAAkhCAADw8AAIQkgASiQEAATuhgAErqoADKysAASopAAMqqwADoyOAA6MiAAEqOQACq6qAA5ETgAOIqQACqyqAAiIjgAK7qoACu7qAASqpAAMrIgABKqmAAysqgAGhCwADkREAAqqpAAKqkQACq7kAAqkqgAKpEQADiSOAAZERgAAhEIABiImAEoAAAAAAADwCEAAAABqpgAIyqwAAGiGAAJqpgAAToYAAkZEAABKpiQIyqoABAREAAQERIAIrKoABEREAADuqgAAyqoAAEqkAADKyAAAamIAAMqIAABoLAAE5EQAAKqmAACqpAAAqu4AAKRKAACqRAAA4s4AAkxCAARERAAIRkgAbAAAAABKrgAEqKSACgqmACQk6OBKBuYACgbmAEIG5gAEBuYAAAaGSEoE6OAKBOjghATo4AoERABKBEQAhAREAKBK6gBASuoAJA6MjgBv5wAHr6sASgSqQKAEqkCEBKpASgqkAIQKpACgqkQAoEqqQKCqqkAARoZASoyOAKpORADKyrohJU5EgCQG5gAkBEQAJASqQCQKpABsDKoAbAru6gbmDgAEpA4AQEikAAAOiAAADiIARA4EjkQOCOQEBO5AAFhQAAChoAAUFBQUWlpaWtfX19dERERERExERETMRERVXVVVAA9VVQDMRERV3VVVVVVVVQD9VVVV3wAAVV8AAETMAAAADEREREcAAERPAAAAD0REREdERAAPAABET0RERHdERFVXVVVVdwAAAHdVVVX/AAAA/1VVVXdVVQD/AABV/1VVRP8AAFVfAAAA/0REAA9VVVVXAABEdwAAAHdERAAHVVVVX1VVRP9ERERMAAAAB0RE/////wAA///MzMzMMzMzM///AAAFqqUAaamSAA6oiAAA6qoA+EJI8AB6qkAAVVZIAKREQOSqpOBKrqpAaZZmkGQmmWAA+Z8AEmlkgAaOhgAGmZkADg4OAABOQOAAQkBgACQgYAJUREREREzABA4EAAWgWgBKQAAAAAZgAAAGAAADIqYgDKoAAEJGAAAAZmYAAAAAAA==");
    currentFont = base64ToBits(8, 16, "AAAAAAAAAAAAAAAAAAAAAAAAAH7DpaWBgb2Zw34AAAAAAAB+/9vb///D5/9+AAAAAAAAAAAid39/fz4cCAAAAAAAAAAACBw+fz4cCAAAAAAAAAAACBwcKnd3Khw+AAAAAAAAAAgcPj5/fyocPgAAAAAAAAAAABg8PDwYAAAAAAD////////nw8PD5///////AAAAAAA8ZsPDw2Y8AAAAAP//////w5k8PDyZw/////8AAAAADwMHfc3MzMx4AAAAAAAAADxmZmZmPBg8GAAAAAAAAAA+Mj4wMDBw8GAAAAAAAAAAPzM/MzMzc/dvBgAAAAAAABh+PGZmPH4YAAAAAAAAAABgcHh8fnx4cGAAAAAAAAAABg4ePn4+Hg4GAAAAAAAAABg8fhgYGH48GAAAAAAAAABmZmZmZmYAZmYAAAAAAAAAHz5+fn4+HgYGBgYGAAAAADxmYDg8ZmY8HAZmPAAAAAAAAAAAAAAAAAD///8AAAAAGDx+GBgYfjwYfgAAAAAAABg8fhgYGBgYGAAAAAAAAAAYGBgYGBh+PBgAAAAAAAAAAAAYDH4MGAAAAAAAAAAAAAAAGDB+MBgAAAAAAAAAAAAAAGBgfgAAAAAAAAAAAAAAAAAkZv9mJAAAAAAAAAAAABgYGDw8PH5+fgAAAAAAAAB+fn48PDwYGBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABg8PDwYGAAYGAAAAAAAAABmZmYAAAAAAAAAAAAAAAAANjZ/NjY2fzY2AAAAAAAYGDxmYDAYDAZmPBgYAAAAAHDY2nYMGDBuWxsOAAAAAAAAOGxsOGBvZmY7AAAAAAAAABgYGAAAAAAAAAAAAAAAAAAMGBgwMDAwMBgYDAAAAAAAMBgYDAwMDAwYGDAAAAAAAAAANhx/HDYAAAAAAAAAAAAAABgYfhgYAAAAAAAAAAAAAAAAAAAAABwcDBgAAAAAAAAAAAB+AAAAAAAAAAAAAAAAAAAAAAAAHBwAAAAAAAAABgYMDBgYMDBgYAAAAAAAAB4zNzczOzszHgAAAAAAAAAMHHwMDAwMDAwAAAAAAAAAPGZmBgwYMGB+AAAAAAAAADxmZgYcBmZmPAAAAAAAAAAwMDY2NmZ/BgYAAAAAAAAAfmBgYHwGBgx4AAAAAAAAABwYMHxmZmZmPAAAAAAAAAB+BgwMGBgwMDAAAAAAAAAAPGZmdjxuZmY8AAAAAAAAADxmZmZmPgwYOAAAAAAAAAAAABwcAAAAHBwAAAAAAAAAAAAcHAAAABwcDBgAAAAAAAYMGDBgMBgMBgAAAAAAAAAAAAB+AH4AAAAAAAAAAAAAYDAYDAYMGDBgAAAAAAAAADxmZgwYGAAYGAAAAAAAAAB+w8PP29vPwH8AAAAAAAAAGDxmZmZ+ZmZmAAAAAAAAAHxmZmZ8ZmZmfAAAAAAAAAA8ZmZgYGBmZjwAAAAAAAAAeGxmZmZmZmx4AAAAAAAAAH5gYGB8YGBgfgAAAAAAAAB+YGBgfGBgYGAAAAAAAAAAPGZmYGBuZmY+AAAAAAAAAGZmZmZ+ZmZmZgAAAAAAAAA8GBgYGBgYGDwAAAAAAAAABgYGBgYGZmY8AAAAAAAAAGZmbGx4bGxmZgAAAAAAAABgYGBgYGBgYH4AAAAAAAAAY2N3a2trY2NjAAAAAAAAAGNjc3tvZ2NjYwAAAAAAAAA8ZmZmZmZmZjwAAAAAAAAAfGZmZnxgYGBgAAAAAAAAADxmZmZmZmZmPAwGAAAAAAB8ZmZmfGxmZmYAAAAAAAAAPGZgMBgMBmY8AAAAAAAAAH4YGBgYGBgYGAAAAAAAAABmZmZmZmZmZjwAAAAAAAAAZmZmZmZmZjwYAAAAAAAAAGNjY2trazY2NgAAAAAAAABmZjQYGCxmZmYAAAAAAAAAZmZmZjwYGBgYAAAAAAAAAH4GBgwYMGBgfgAAAAAAAAA8MDAwMDAwMDAwMDwAAAAAYGAwMBgYDAwGBgAAAAAAADwMDAwMDAwMDAwMPAAAGDxmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAA4GAwAAAAAAAAAAAAAAAAAAAAAADwGBj5mZj4AAAAAAAAAYGB8ZmZmZmZ8AAAAAAAAAAAAPGZgYGBmPAAAAAAAAAAGBj5mZmZmZj4AAAAAAAAAAAA8ZmZ+YGA8AAAAAAAAAB4wMDB+MDAwMAAAAAAAAAAAAD5mZmZmZj4GBnwAAAAAYGB8ZmZmZmZmAAAAAAAAGBgAeBgYGBgYfgAAAAAAAAwMADwMDAwMDAwMDHgAAAAAYGBmZmx4bGZmAAAAAAAAAHgYGBgYGBgYfgAAAAAAAAAAAH5ra2tra2MAAAAAAAAAAAB8ZmZmZmZmAAAAAAAAAAAAPGZmZmZmPAAAAAAAAAAAAHxmZmZmZnxgYGAAAAAAAAA+ZmZmZmY+BgYGAAAAAAAAZm5wYGBgYAAAAAAAAAAAAD5gYDwGBnwAAAAAAAAAMDB+MDAwMDAeAAAAAAAAAAAAZmZmZmZmPgAAAAAAAAAAAGZmZmZmPBgAAAAAAAAAAABja2trazY2AAAAAAAAAAAAZmY8GDxmZgAAAAAAAAAAAGZmZmZmZjwMGPAAAAAAAAB+BgwYMGB+AAAAAAAAAAwYGBgwYDAYGBgMAAAAAAAYGBgYGBgYGBgYGBgAAAAAMBgYGAwGDBgYGDAAAAAAAHHbjgAAAAAAAAAAAAAAAAAYPGZmZmZmZn4AAAAAAAAAPGZmYGBgZmY8GAw4AAAAZmYAZmZmZmZmPgAAAAAADgwYADxmZn5gYjwAAAAAABg8ZgA8BgY+ZmY+AAAAAAAAZmYAPAYGPmZmPgAAAAAAcDAYADwGBj5mZj4AAAAAADxmPAA8BgY+ZmY+AAAAAAAAAAAAPGZgYGBmPBgMOAAAGDxmADxmZn5gYDwAAAAAAABmZgA8ZmZ+YGA8AAAAAABwMBgAPGZmfmBgPAAAAAAAAGZmAHgYGBgYGH4AAAAAABg8ZgB4GBgYGBh+AAAAAABwMBgAeBgYGBgYfgAAAABmZgAYPGZmZn5mZmYAAAAAPGY8GDxmZmZ+ZmZmAAAAAAwYAH5gYGB8YGBgfgAAAAAAAAAAAG4bG3/Y2HcAAAAAAAAADxw8bG98bGxvAAAAAAAYPGYAPGZmZmZmPAAAAAAAAGZmADxmZmZmZjwAAAAAAHAwGAA8ZmZmZmY8AAAAAAAYPGYAZmZmZmZmPgAAAAAAcDAYAGZmZmZmZj4AAAAAAABmZgBmZmZmZmY8DBjwAGZmADxmZmZmZmZmPAAAAABmZgBmZmZmZmZmZjwAAAAAAAAAGBg8ZmBgZjwYGAAAAAAAADxmYGD8YGDA/gAAAAAAAABmZmY8fhh+GBgAAAAAAAAA+MzMzP7PxsbDAAAAAAAAAA4bGDwYGBjYcAAAAAAADgwYADwGBj5mZj4AAAAAAA4MGAB4GBgYGBh+AAAAAAAODBgAPGZmZmZmPAAAAAAADgwYAGZmZmZmZj4AAAAAAHHbjgB8ZmZmZmZmAAAAADtuAGNjc3tvZ2NjYwAAAAAAAAA8Bj5mPgB+AAAAAAAAAAAAPGZmZjwAfgAAAAAAAAAAAAAAABgYABgYMGZmPAAAAAAAAAAAfmBgAAAAAAAAAAAAAAAAAH4GBgAAAAAAAAAAYOBjZmwYPmPGDA8AAAAAAGDgY2ZsGDdv2x8DAAAAAAAAAAAAGBgAGBg8PDwYAAAAAAAAAAAzZsxmMwAAAAAAAAAAAAAAzGYzZswAAAARRBFEEUQRRBFEEUQRRBFEmWaZZplmmWaZZplmmWaZZt133Xfdd9133Xfdd9133XcYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBj4GBgYGBgYGBgYGBgYGPgY+BgYGBgYGBg2NjY2NjY2NvY2NjY2NjY2AAAAAAAAAAD+NjY2NjY2NgAAAAAAAPgY+BgYGBgYGBg2NjY2Njb2BvY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NgAAAAAAAP4G9jY2NjY2NjY2NjY2Njb2Bv4AAAAAAAAANjY2NjY2Njb+AAAAAAAAABgYGBgYGPgY+AAAAAAAAAAAAAAAAAAAAPgYGBgYGBgYGBgYGBgYGBgfAAAAAAAAABgYGBgYGBgY/wAAAAAAAAAAAAAAAAAAAP8YGBgYGBgYGBgYGBgYGBgfGBgYGBgYGAAAAAAAAAAA/wAAAAAAAAAYGBgYGBgYGP8YGBgYGBgYGBgYGBgYHxgfGBgYGBgYGDY2NjY2NjY2NzY2NjY2NjY2NjY2NjY3MD8AAAAAAAAAAAAAAAAAPzA3NjY2NjY2NjY2NjY2NvcA/wAAAAAAAAAAAAAAAAD/APc2NjY2NjY2NjY2NjY2NzA3NjY2NjY2NgAAAAAAAP8A/wAAAAAAAAA2NjY2Njb3APc2NjY2NjY2GBgYGBgY/wD/AAAAAAAAADY2NjY2NjY2/wAAAAAAAAAAAAAAAAD/AP8YGBgYGBgYAAAAAAAAAAD/NjY2NjY2NjY2NjY2NjY2PwAAAAAAAAAYGBgYGBgfGB8AAAAAAAAAAAAAAAAAHxgfGBgYGBgYGAAAAAAAAAAAPzY2NjY2NjY2NjY2NjY2Nv82NjY2NjY2GBgYGBgY/xj/GBgYGBgYGBgYGBgYGBgY+AAAAAAAAAAAAAAAAAAAAB8YGBgYGBgY/////////////////////wAAAAAAAAAA///////////w8PDw8PDw8PDw8PDw8PDwDw8PDw8PDw8PDw8PDw8PD///////////AAAAAAAAAAAAAAAAAAB7zszMzM57AAAAAAAAADhsbGxmZmZmbAAAAAAAAAB+ZmBgYGBgYGAAAAAAAAAAfzY2NjY2NjY2AAAAAAAAAH5gMBgMGDBgfgAAAAAAAAAAAD9mZmZmZjwAAAAAAAAAAABmZmZmZmZ7YGDAAAAAAAAAfhgYGBgaDAAAAAAAAAAYftvb29t+GBgAAAAAAAAAPGZmZn5mZmY8AAAAAAAAAD5jY2NjYzY2dwAAAAAAAAB+MBg8ZmZmZjwAAAAAAAAAAAB229vb29tuAAAAAAAAAAAma2tra2trPggICAAAAAAAADxmYDhgZjwAAAAAAAAAPGZmZmZmZmZmAAAAAAAAAAAAfgAAfgAAfgAAAAAAAAAAABgYfhgYAH4AAAAAAAAAAABgPAY8YAB+AAAAAAAAAAAABjxgPAYAfgAAAAAAAA4bGBgYGBgYGBgYGBgYGBgYGBgYGBgYGNhwAAAAAAAAAAAYGAB+ABgYAAAAAAAAAABx244AAABx244AAAAAAAA8ZmY8AAAAAAAAAAAAAAAAAAAAABwcAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAADwwMDAxMbDwYAAAAAAAAADw2NjY2AAAAAAAAAAAAAAA4DBgwPAAAAAAAAAAAAAAAfn5+fn5+fn5+AAAAAAAAAAAAAAAAAAAAAAAAAA==");

    function getFontWidth() {
        return currentFont.width;
    }

    function getFontHeight() {
        return currentFont.height;
    }

    function getFontBytes() {
        return currentBytes;
    }

    function flushBuffer(buffer) {
        var i;
        for (i = 0; i < buffer.length; i += 1) {
            delete buffer[i];
        }
    }

    function setFont(width, height, bytes) {
        flushBuffer(bigFontBuffer);
        flushBuffer(smallFontBuffer);
        flushBuffer(upperBlockBuffer);
        flushBuffer(lowerBlockBuffer);
        flushBuffer(fullBlockBuffer);
        currentBytes = bytes;
        currentFont = bytesToBits(width, height, bytes);
    }

    function doubleScale(rgbaSource, fontWidth) {
        var byteWidth, doubledByteWidth, rgba, rgbaDoubled, startOfRow, i, k;
        byteWidth = fontWidth * 4;
        doubledByteWidth = byteWidth * 2;
        rgbaDoubled = new Uint8Array(rgbaSource.length * 4);
        for (i = 0, k = 0; i < rgbaSource.length; i += 4) {
            rgba = rgbaSource.subarray(i, i + 4);
            rgbaDoubled.set(rgba, k);
            k += 4;
            rgbaDoubled.set(rgba, k);
            k += 4;
            if ((i + 4) % byteWidth === 0) {
                startOfRow = k - doubledByteWidth;
                rgbaDoubled.set(rgbaDoubled.subarray(startOfRow, startOfRow + doubledByteWidth), k);
                k += doubledByteWidth;
            }
        }
        return rgbaDoubled;
    }

    function scaleCanvas(sourceData, width, height, chunkWidth, chunkHeight) {
        var destWidth, destHeight, destData, rgba, pixelRowOffset, chunkSize, i, j, k, x, y, r, g, b, a;

        rgba = new Uint8Array(4);
        destWidth = width / chunkWidth;
        destHeight = height / chunkHeight;
        destData = new Uint8Array(destWidth * destHeight * 4);
        pixelRowOffset = (width - chunkWidth) * 4;
        chunkSize = chunkWidth * chunkHeight;

        for (i = x = y = 0; i < destData.length; i += 4) {
            for (j = r = g = b = a = 0, k = (y * width * chunkHeight + x * chunkWidth) * 4; j < chunkSize; ++j) {
                r += sourceData[k++];
                g += sourceData[k++];
                b += sourceData[k++];
                a += sourceData[k++];
                if ((j + 1) % chunkWidth === 0) {
                    k += pixelRowOffset;
                }
            }
            rgba[0] = Math.round(r / chunkSize);
            rgba[1] = Math.round(g / chunkSize);
            rgba[2] = Math.round(b / chunkSize);
            rgba[3] = Math.round(a / chunkSize);
            destData.set(rgba, i);
            if (++x === destWidth) {
                x = 0;
                ++y;
            }
        }

        return destData;
    }

    function getData(charCode, fgRGBA, bgRGBA, font) {
        var fontBitWidth, rgbaOutput, i, j, k;
        fontBitWidth = font.width * font.height;
        rgbaOutput = new Uint8Array(font.width * font.height * 4);
        for (i = 0, j = charCode * fontBitWidth, k = 0; i < fontBitWidth; i += 1, j += 1) {
            if (font.bits[j] === 1) {
                rgbaOutput.set(fgRGBA, k);
            } else {
                rgbaOutput.set(bgRGBA, k);
            }
            k += 4;
        }
        return rgbaOutput;
    }

    function bigFont(charCode, fg, bg) {
        var bufferIndex;
        bufferIndex = charCode + (fg << 8) + (bg << 12);
        if (!bigFontBuffer[bufferIndex]) {
            bigFontBuffer[bufferIndex] = getData(charCode, colors[fg], colors[bg], currentFont);
            if (retina) {
                bigFontBuffer[bufferIndex] = doubleScale(bigFontBuffer[bufferIndex], currentFont.width);
            }
        }
        return bigFontBuffer[bufferIndex];
    }

    function bigFontRGBA(charCode, rgba) {
        var data;
        data = getData(charCode, rgba, new Uint8Array([0, 0, 0, 0]), currentFont);
        return retina ? doubleScale(data, currentFont.width) : data;
    }

    function upperBlock(fg) {
        if (!upperBlockBuffer[fg]) {
            upperBlockBuffer[fg] = getData(UPPER_HALF_BLOCK, colors[fg], new Uint8Array([0, 0, 0, 0]), currentFont);
            if (retina) {
                upperBlockBuffer[fg] = doubleScale(upperBlockBuffer[fg], currentFont.width);
            }
        }
        return upperBlockBuffer[fg];
    }

    function lowerBlock(fg) {
        if (!lowerBlockBuffer[fg]) {
            lowerBlockBuffer[fg] = getData(LOWER_HALF_BLOCK, colors[fg], new Uint8Array([0, 0, 0, 0]), currentFont);
            if (retina) {
                lowerBlockBuffer[fg] = doubleScale(lowerBlockBuffer[fg], currentFont.width);
            }
        }
        return lowerBlockBuffer[fg];
    }

    function fullBlock(fg) {
        if (!fullBlockBuffer[fg]) {
            fullBlockBuffer[fg] = getData(FULL_BLOCK, colors[fg], colors[fg], currentFont);
            if (retina) {
                fullBlockBuffer[fg] = doubleScale(fullBlockBuffer[fg], currentFont.width);
            }
        }
        return fullBlockBuffer[fg];
    }

    function smallFont(charCode, fg, bg) {
        var bufferIndex;
        bufferIndex = charCode + (fg << 8) + (bg << 12);
        if (!smallFontBuffer[bufferIndex]) {
            smallFontBuffer[bufferIndex] = getData(charCode, colors[fg], colors[bg], currentFontSmall);
            if (!retina) {
                smallFontBuffer[bufferIndex] = scaleCanvas(smallFontBuffer[bufferIndex], currentFontSmall.width, currentFontSmall.height, 2, 2);
            }
        }
        return smallFontBuffer[bufferIndex];
    }

    function getFlippedTextX(charCode) {
        switch (charCode) {
        case DATA_LINK_ESCAPE:
            return DEVICE_CONTROL_1;
        case SUBSTITUTE:
            return ESCAPE;
        case LEFT_PARENTHESIS:
            return RIGHT_PARENTHESIS;
        case SOLIDUS:
            return REVERSE_SOLIDUS;
        case LESS_THAN_SIGN:
            return GREATER_THAN_SIGN;
        case LEFT_SQUARE_BRACKET:
            return RIGHT_SQUARE_BRACKET;
        case LEFT_CURLY_BRACKET:
            return RIGHT_CURLY_BRACKET;
        case REVERSED_NOT_SIGN:
            return NOT_SIGN;
        case LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
            return RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK;
        case BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT:
            return BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT;
        case BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE:
            return BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE;
        case BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE:
            return BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE;
        case BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE:
            return BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE;
        case BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE:
            return BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE;
        case BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT:
            return BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT;
        case BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT:
            return BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT;
        case BOX_DRAWINGS_DOUBLE_UP_AND_LEFT:
            return BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT;
        case BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE:
            return BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE;
        case BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE:
            return BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE;
        case BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT:
            return BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT;
        case BOX_DRAWINGS_LIGHT_UP_AND_RIGHT:
            return BOX_DRAWINGS_LIGHT_UP_AND_LEFT;
        case LEFT_HALF_BLOCK:
            return RIGHT_HALF_BLOCK;
        case GREATER_THAN_OR_EQUAL_TO:
            return LESS_THAN_OR_EQUAL_TO;
        case DEVICE_CONTROL_1:
            return DATA_LINK_ESCAPE;
        case ESCAPE:
            return SUBSTITUTE;
        case RIGHT_PARENTHESIS:
            return LEFT_PARENTHESIS;
        case REVERSE_SOLIDUS:
            return SOLIDUS;
        case GREATER_THAN_SIGN:
            return LESS_THAN_SIGN;
        case RIGHT_SQUARE_BRACKET:
            return LEFT_SQUARE_BRACKET;
        case RIGHT_CURLY_BRACKET:
            return LEFT_CURLY_BRACKET;
        case NOT_SIGN:
            return REVERSED_NOT_SIGN;
        case RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK:
            return LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK;
        case BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT:
            return BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT;
        case BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE:
            return BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE;
        case BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE:
            return BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE;
        case BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE:
            return BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE;
        case BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE:
            return BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE;
        case BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT:
            return BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT;
        case BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT:
            return BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT;
        case BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT:
            return BOX_DRAWINGS_DOUBLE_UP_AND_LEFT;
        case BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE:
            return BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE;
        case BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE:
            return BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE;
        case BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT:
            return BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT;
        case BOX_DRAWINGS_LIGHT_UP_AND_LEFT:
            return BOX_DRAWINGS_LIGHT_UP_AND_RIGHT;
        case RIGHT_HALF_BLOCK:
            return LEFT_HALF_BLOCK;
        case LESS_THAN_OR_EQUAL_TO:
            return GREATER_THAN_OR_EQUAL_TO;
        default:
            return charCode;
        }
    }

    function getFlippedTextY(charCode) {
        switch (charCode) {
        case CANCEL:
            return END_OF_MEDIUM;
        case RECORD_SEPERATOR:
            return UNIT_SEPERATOR;
        case EXCLAMATION_MARK:
            return INVERTED_EXCLAMATION_MARK;
        case BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE:
            return BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE;
        case BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE:
            return BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE;
        case BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT:
            return BOX_DRAWINGS_DOUBLE_UP_AND_LEFT;
        case BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT:
            return BOX_DRAWINGS_LIGHT_UP_AND_LEFT;
        case BOX_DRAWINGS_LIGHT_UP_AND_RIGHT:
            return BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT;
        case BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL:
            return BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL;
        case BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT:
            return BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT;
        case BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL:
            return BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL;
        case BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE:
            return BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE;
        case BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE:
            return BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE;
        case BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE:
            return BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE;
        case BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE:
            return BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE;
        case UPPER_HALF_BLOCK:
            return LOWER_HALF_BLOCK;
        case END_OF_MEDIUM:
            return CANCEL;
        case UNIT_SEPERATOR:
            return RECORD_SEPERATOR;
        case INVERTED_EXCLAMATION_MARK:
            return EXCLAMATION_MARK;
        case BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE:
            return BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE;
        case BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE:
            return BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE;
        case BOX_DRAWINGS_DOUBLE_UP_AND_LEFT:
            return BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT;
        case BOX_DRAWINGS_LIGHT_UP_AND_LEFT:
            return BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT;
        case BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT:
            return BOX_DRAWINGS_LIGHT_UP_AND_RIGHT;
        case BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL:
            return BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL;
        case BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT:
            return BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT;
        case BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL:
            return BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL;
        case BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE:
            return BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE;
        case BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE:
            return BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE;
        case BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE:
            return BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE;
        case BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE:
            return BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE;
        case LOWER_HALF_BLOCK:
            return UPPER_HALF_BLOCK;
        default:
            return charCode;
        }
    }

    return {
        "getFontWidth": getFontWidth,
        "getFontHeight": getFontHeight,
        "getFontBytes": getFontBytes,
        "setFont": setFont,
        "bigFont": bigFont,
        "upperBlock": upperBlock,
        "lowerBlock": lowerBlock,
        "fullBlock": fullBlock,
        "bigFontRGBA": bigFontRGBA,
        "smallFont": smallFont,
        "getFlippedTextX": getFlippedTextX,
        "getFlippedTextY": getFlippedTextY,
        "NULL": NULL,
        "CANCEL": CANCEL,
        "END_OF_MEDIUM": END_OF_MEDIUM,
        "SUBSTITUTE": SUBSTITUTE,
        "ESCAPE": ESCAPE,
        "RECORD_SEPERATOR": RECORD_SEPERATOR,
        "UNIT_SEPERATOR": UNIT_SEPERATOR,
        "SPACE": SPACE,
        "EXCLAMATION_MARK": EXCLAMATION_MARK,
        "LEFT_PARENTHESIS": LEFT_PARENTHESIS,
        "RIGHT_PARENTHESIS": RIGHT_PARENTHESIS,
        "SOLIDUS": SOLIDUS,
        "LESS_THAN_SIGN": LESS_THAN_SIGN,
        "GREATER_THAN_SIGN": GREATER_THAN_SIGN,
        "LEFT_SQUARE_BRACKET": LEFT_SQUARE_BRACKET,
        "REVERSE_SOLIDUS": REVERSE_SOLIDUS,
        "RIGHT_SQUARE_BRACKET": RIGHT_SQUARE_BRACKET,
        "LEFT_CURLY_BRACKET": LEFT_CURLY_BRACKET,
        "RIGHT_CURLY_BRACKET": RIGHT_CURLY_BRACKET,
        "C_CEDILLA": C_CEDILLA,
        "DATA_LINK_ESCAPE": DATA_LINK_ESCAPE,
        "REVERSED_NOT_SIGN": REVERSED_NOT_SIGN,
        "DEVICE_CONTROL_1": DEVICE_CONTROL_1,
        "NOT_SIGN": NOT_SIGN,
        "LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK": LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK,
        "INVERTED_EXCLAMATION_MARK": INVERTED_EXCLAMATION_MARK,
        "LIGHT_SHADE": LIGHT_SHADE,
        "MEDIUM_SHADE": MEDIUM_SHADE,
        "DARK_SHADE": DARK_SHADE,
        "BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT": BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT,
        "BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE": BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE,
        "BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE": BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE,
        "BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE": BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE,
        "BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE": BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE,
        "BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT": BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT,
        "BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT": BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT,
        "RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK": RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK,
        "BOX_DRAWINGS_DOUBLE_UP_AND_LEFT": BOX_DRAWINGS_DOUBLE_UP_AND_LEFT,
        "BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE": BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE,
        "BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE": BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE,
        "BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT": BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT,
        "BOX_DRAWINGS_LIGHT_UP_AND_RIGHT": BOX_DRAWINGS_LIGHT_UP_AND_RIGHT,
        "BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL": BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL,
        "BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL": BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL,
        "BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT": BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT,
        "BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE": BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE,
        "BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE": BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE,
        "BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT": BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT,
        "BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT": BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT,
        "BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL": BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL,
        "BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL": BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL,
        "BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT": BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT,
        "BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE": BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE,
        "BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE": BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE,
        "BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE": BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE,
        "BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE": BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE,
        "BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE": BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE,
        "BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE": BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE,
        "BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE": BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE,
        "BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE": BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE,
        "BOX_DRAWINGS_LIGHT_UP_AND_LEFT": BOX_DRAWINGS_LIGHT_UP_AND_LEFT,
        "BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT": BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT,
        "FULL_BLOCK": FULL_BLOCK,
        "LOWER_HALF_BLOCK": LOWER_HALF_BLOCK,
        "LEFT_HALF_BLOCK": LEFT_HALF_BLOCK,
        "RIGHT_HALF_BLOCK": RIGHT_HALF_BLOCK,
        "UPPER_HALF_BLOCK": UPPER_HALF_BLOCK,
        "GREATER_THAN_OR_EQUAL_TO": GREATER_THAN_OR_EQUAL_TO,
        "LESS_THAN_OR_EQUAL_TO": LESS_THAN_OR_EQUAL_TO,
        "BULLET_OPERATOR": BULLET_OPERATOR,
        "MIDDLE_DOT": MIDDLE_DOT,
        "MIDDLE_BLOCK": MIDDLE_BLOCK,
        "NO_BREAK_SPACE": NO_BREAK_SPACE
    };
}

